<?xml version="1.0"?>
<project name="Web-server" basedir="." xmlns:jacoco="antlib:org.jacoco.ant" default="startup">
    <property file="build.properties"/>


    <target name="create-db">
        <sql classpath="${postgresql.classpath}"
            driver="${postgresql.driver}"
            url="${postgresql.localhost}"
            userid="${postgresql.user}"
            password="${postgresql.password}"
            autocommit="True"
            src="${db.dir}/create_db.sql"
        />
    </target>
    <target name="init-db">
        <sql classpath="${postgresql.classpath}"
            driver="${postgresql.driver}"
            url="${postgresql.localhost}${postgresql.database}"
            userid="${postgresql.user}"
            password="${postgresql.password}"
            autocommit="True"
            src="${db.dir}/init_db.sql"
        />
    </target>
    <target name="populate-db">
        <sql classpath="${postgresql.classpath}"
            driver="${postgresql.driver}"
            url="${postgresql.localhost}${postgresql.database}"
            userid="${postgresql.user}"
            password="${postgresql.password}"
            autocommit="True"
            src="${db.dir}/populate_db.sql"
        />
    </target>
    <target name="drop-tables">
        <sql classpath="${postgresql.classpath}"
            driver="${postgresql.driver}"
            url="${postgresql.localhost}"
            userid="${postgresql.user}"
            password="${postgresql.password}"
            autocommit="True"
            src="${db.dir}/drop_tables.sql"
        />
    </target>
    <target name="drop-db">
        <sql classpath="${postgresql.classpath}"
            driver="${postgresql.driver}"
            url="${postgresql.localhost}"
            userid="${postgresql.user}"
            password="${postgresql.password}"
            autocommit="True"
            src="${db.dir}/drop_db.sql"
        />
    </target>
    <target name="setup-db" depends="drop-tables, drop-db, create-db, init-db, populate-db"/>
    

    <path id="build.classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
        <pathelement path="${main.build.dir}"/>
        <pathelement path="${resources.dir}"/>
    </path>

    <target name="build" depends="setup-db" >
        <mkdir dir="${build.dir}/main"/>
        <javac includeantruntime="false"
               debug="true"
               debuglevel="lines,vars,source"
               source="${jdk.version}" target="${jdk.version}"
               srcdir="${src.dir}" destdir="${main.build.dir}"
               classpathref="build.classpath">
            <compilerarg value="-proc:none"/>
        </javac>
        <mkdir dir="${test.build.dir}"/>
        <javac includeantruntime="false"
               debug="true"
               debuglevel="lines,vars,source"
               source="${jdk.version}" target="${jdk.version}"
               srcdir="${test.dir}" destdir="${test.build.dir}"
               classpathref="build.classpath"
        />
    </target>

    
    <target name="clean">
        <delete failonerror="false" dir="${build.dir}"/>
    </target>


    <target name = "init-web">
        <mkdir dir = "${web.build.dir}/WEB-INF/classes"/>
        <mkdir dir = "${web.build.dir}/WEB-INF/lib"/>
    </target>

    <target name = "build-war" depends = "clean-war, init-web">
        <copy todir = "${web.build.dir}/WEB-INF/classes">
            <fileset dir = "${main.build.dir}" includes = "**/*.class"/>
        </copy>

        <copy todir = "${web.build.dir}/WEB-INF/lib" flatten = "true">
            <fileset dir = "${lib.dir}" includes = "**/*.*"/>
        </copy>

        <copy todir = "${web.build.dir}/WEB-INF">
            <fileset dir = "${web.dir}/WEB-INF" includes = "**/*.*"/>
        </copy>

        <copy todir = "${web.build.dir}">
            <fileset dir="${web.dir}" includes = "**/*.*"/>
        </copy>

        <jar jarfile = "${web.build.dir}/${war.file}" basedir = "${web.build.dir}"/>
    </target>


    <target name = "clean-war">
        <delete failonerror = "false" file = "${web.build.dir}/${war.file}"/>
    </target>


    <presetdef name = "asadmin">
        <java jar = "${glassfish.home}/modules/admin-cli.jar" fork = "true" jvm = "${java.path}">
            <arg line = "--port ${glassfish.admin.port}"/>
        </java>
    </presetdef>

    <target name = "create-server">
        <asadmin failonerror = "true">
            <arg value = "create-domain"/>
            <arg value = "--instanceport"/>
            <arg value = "9090"/>
            <arg value = "--nopassword=true"/>
            <arg value = "${glassfish.domain}"/>
        </asadmin>
    </target>

    <target name = "start-server">
        <asadmin failonerror = "true">
            <arg value = "start-domain"/>
            <arg value = "${glassfish.domain}"/>
        </asadmin>
    </target>

    <target name = "stop-server">
        <asadmin failonerror = "true">
            <arg value = "stop-domain"/>
            <arg value = "${glassfish.domain}"/>
        </asadmin>
    </target>

    <target name = "deploy">
        <asadmin failonerror = "true">
            <arg value = "deploy"/>
            <arg value = "--force=true"/>
            <arg value = "${web.build.dir}/${war.file}"/>
        </asadmin>
    </target>
    
    <target name = "undeploy">
        <asadmin failonerror = "true">
            <arg value = "undeploy"/>
            <arg value = "${war.name}"/>
        </asadmin>
    </target>


    <target name="redeploy" depends="undeploy, clean, clean-war, build, build-war, deploy"/>
    <target name="startup" depends="stop-server, clean, build, build-war, start-server, deploy"/>


    <path id="test.classpath">
        <pathelement path="${test.build.dir}"/>
        <pathelement path="${test.build.dir}/selenium"/>
    </path>

    <taskdef name="testng" classname="org.testng.TestNGAntTask" classpath="${lib.dir}/testng-7.4.0.jar"/>

    <target name="test" depends="build">
        <testng mode="mixed" classpathref="test.classpath">
            <classpath refid="build.classpath"/>
            <xmlfileset dir="." includes="testng.xml"/>
        </testng>
    </target>

    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="lib/jacoco/jacocoant.jar"/>
    </taskdef>

    <target name="coverage-test" depends="build">
        <jacoco:coverage>
            <testng mode="mixed" classpathref="test.classpath">
                <classpath refid="build.classpath"/>
                <xmlfileset dir="." includes="testng.xml"/>
            </testng>
        </jacoco:coverage>
        <jacoco:report>
            <executiondata>
                <file file="jacoco.exec"/>
            </executiondata>
            <structure name="Example Project">
                <classfiles>
                    <fileset dir="${main.build.dir}"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.dir}"/>
                </sourcefiles>
            </structure>
            <html destdir="test-output/jacoco"/>
            <xml destfile="test-output/jacoco/report.xml"/>
        </jacoco:report>
    </target>

    <target name="web-test" depends="stop-server, startup">
        <testng mode="mixed" classpathref="test.classpath">
            <classpath refid="build.classpath"/>
            <xmlfileset dir="${test.dir}/selenium/" includes="testng.xml"/>
        </testng>
    </target>

    <target name="light-web-test" depends="redeploy">
        <testng mode="mixed" classpathref="test.classpath">
            <classpath refid="build.classpath"/>
            <xmlfileset dir="${test.dir}/selenium/" includes="testng.xml"/>
        </testng>
    </target>
</project>